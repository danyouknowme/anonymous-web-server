definitions:
  model.AddResourceToUserRequest:
    properties:
      resource:
        $ref: '#/definitions/model.ResourceToUser'
      username:
        type: string
    required:
    - username
    type: object
  model.AllResourceResponse:
    properties:
      is_publish:
        type: boolean
      label:
        type: string
      name:
        type: string
      plan:
        items:
          $ref: '#/definitions/model.Plan'
        type: array
      thumbnail:
        type: string
    type: object
  model.CheckLicenseRequest:
    properties:
      license:
        type: string
      resource_name:
        type: string
    type: object
  model.CreateUserRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - phone
    - username
    type: object
  model.Download:
    properties:
      date:
        type: string
      resource_name:
        type: string
      username:
        type: string
    type: object
  model.DownloadResourceRequest:
    properties:
      resource_name:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.ForgotPasswordRequest:
    properties:
      new_password:
        type: string
      secret_code:
        type: string
      username:
        type: string
    type: object
  model.GetCounterStateResponse:
    properties:
      download:
        type: integer
      orders:
        type: integer
      users:
        type: integer
    type: object
  model.GetDownloadResourceResponse:
    properties:
      download:
        type: string
      version:
        type: string
    type: object
  model.GetResourceByNamePatchNotes:
    properties:
      logs:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  model.GetResourceByNameResponse:
    properties:
      description:
        type: string
      document:
        type: string
      images:
        items:
          type: string
        type: array
      is_publish:
        type: boolean
      label:
        type: string
      name:
        type: string
      patch_notes:
        items:
          $ref: '#/definitions/model.GetResourceByNamePatchNotes'
        type: array
      plan:
        items:
          $ref: '#/definitions/model.Plan'
        type: array
      thumbnail:
        type: string
      video:
        type: string
    type: object
  model.GetUserDataResponse:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      license:
        type: string
      phone:
        type: string
      resources:
        items:
          $ref: '#/definitions/model.UserResource'
        type: array
      secret_code:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  model.GetUserResetTimeResponse:
    properties:
      can_reset:
        type: boolean
      timer:
        type: integer
    type: object
  model.Homepage:
    properties:
      description:
        items:
          type: string
        type: array
      resourceLabel:
        type: string
      resourceName:
        type: string
      title:
        type: string
    type: object
  model.LoginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.LoginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.MessageResponse:
    properties:
      message:
        type: string
    type: object
  model.PatchNote:
    properties:
      download:
        type: string
      logs:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  model.Plan:
    properties:
      name:
        type: string
      price:
        type: integer
    type: object
  model.Resource:
    properties:
      description:
        type: string
      document:
        type: string
      images:
        items:
          type: string
        type: array
      is_publish:
        type: boolean
      label:
        type: string
      name:
        type: string
      patch_notes:
        items:
          $ref: '#/definitions/model.PatchNote'
        type: array
      plan:
        items:
          $ref: '#/definitions/model.Plan'
        type: array
      thumbnail:
        type: string
      video:
        type: string
    type: object
  model.ResourceToUser:
    properties:
      day_left:
        type: integer
      name:
        type: string
    type: object
  model.UpdateUserDataRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      license:
        type: string
      phone:
        type: string
      resources:
        items:
          $ref: '#/definitions/model.UserResource'
        type: array
      username:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      firstname:
        type: string
      is_admin:
        type: boolean
      last_reset:
        type: string
      lastname:
        type: string
      license:
        type: string
      password:
        type: string
      phone:
        type: string
      reset_time:
        type: integer
      resources:
        items:
          $ref: '#/definitions/model.UserResource'
        type: array
      secret_code:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  model.UserResource:
    properties:
      dayLeft:
        type: integer
      name:
        type: string
      status:
        type: string
    type: object
  model.UserResponse:
    properties:
      email:
        type: string
      firstName:
        type: string
      isAdmin:
        type: boolean
      lastName:
        type: string
      lastReset:
        type: string
      license:
        type: string
      phone:
        type: string
      resetTime:
        type: integer
      resources:
        items:
          $ref: '#/definitions/model.UserResource'
        type: array
      secretCode:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
info:
  contact:
    email: thanathip.suw@gmail.com
    name: Awayfromus Support
    url: https://discord.com/invite/spqAG3Ktkv
  description: The Awayfromus web API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://awayfromus.dev/terms
  title: Awayfromus API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      operationId: LoginUser
      parameters:
      - description: User data to be logged in
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginUserResponse'
        "400":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login user
      tags:
      - users
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create user
      operationId: CreateUser
      parameters:
      - description: User data to be created
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create user
      tags:
      - users
  /api/v1/downloads:
    post:
      consumes:
      - application/json
      description: Download resource by resoure name
      operationId: DownloadResource
      parameters:
      - description: Resource name that need to create download
        in: body
        name: Download
        required: true
        schema:
          $ref: '#/definitions/model.DownloadResourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Download'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Download resource
      tags:
      - downloads
  /api/v1/downloads/{resourceName}:
    get:
      description: Get download resource by resoure name
      operationId: GetDownloadResource
      parameters:
      - description: Resource name that need to get download
        in: path
        name: resourceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GetDownloadResourceResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get download resource
      tags:
      - downloads
  /api/v1/homepage:
    get:
      description: Get homepage information
      operationId: GetHomepageInformation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Homepage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get Homepage
      tags:
      - homepage
    patch:
      consumes:
      - application/json
      description: Update homepage information
      operationId: UpdateHomepageInformation
      parameters:
      - description: Homepage data to be updated
        in: body
        name: Homepage
        required: true
        schema:
          $ref: '#/definitions/model.Homepage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Homepage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Homepage
      tags:
      - homepage
  /api/v1/homepage/counter:
    get:
      description: Get counter state information to show on homepage
      operationId: GetCounterState
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCounterStateResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get counter state
      tags:
      - homepage
  /api/v1/resources:
    get:
      description: Get all resource information
      operationId: GetResourcesInformation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AllResourceResponse'
            type: array
        "500":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get Resources
      tags:
      - resource
    patch:
      consumes:
      - application/json
      description: Update resource information
      operationId: UpdateResource
      parameters:
      - description: Resource data to be updated
        in: body
        name: Resource
        required: true
        schema:
          $ref: '#/definitions/model.Resource'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update resource
      tags:
      - resource
    post:
      consumes:
      - application/json
      description: Create a new resource
      operationId: CreateNewResource
      parameters:
      - description: Resource data to be created
        in: body
        name: Resource
        required: true
        schema:
          $ref: '#/definitions/model.Resource'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Resource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new resource
      tags:
      - resource
  /api/v1/resources/{resourceName}:
    get:
      description: Get resource information by resoure name
      operationId: GetResourceByName
      parameters:
      - description: Resource name that need to get information
        in: path
        name: resourceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetResourceByNameResponse'
        "404":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get resource by name
      tags:
      - resource
  /api/v1/resources/admin/{resourceName}:
    get:
      description: Get resource information by resoure name and require admin
      operationId: GetResourceByNameAndRequiredAdmin
      parameters:
      - description: Resource name that need to get information
        in: path
        name: resourceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "404":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get resource by name required admin
      tags:
      - resource
  /api/v1/resources/user:
    post:
      consumes:
      - application/json
      description: Add resource to user and required admin
      operationId: AddResourceToUser
      parameters:
      - description: Username and resource information
        in: body
        name: Resource
        required: true
        schema:
          $ref: '#/definitions/model.AddResourceToUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResource'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add resource to user
      tags:
      - resource
  /api/v1/users:
    patch:
      consumes:
      - application/json
      description: Update user data required admin
      operationId: UpdateUserData
      parameters:
      - description: User data that will be updated
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user data
      tags:
      - users
  /api/v1/users/{username}:
    get:
      description: Get user data required admin
      operationId: GetUserData
      parameters:
      - description: Username of user that need to update data
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUserDataResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user data
      tags:
      - users
  /api/v1/users/ip/reset:
    post:
      description: Reset ip of all user resource status
      operationId: ResetIP
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResource'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset ip resources
      tags:
      - users
  /api/v1/users/license:
    post:
      consumes:
      - application/json
      description: Check license and update resource status
      operationId: CheckLicense
      parameters:
      - description: License key and resource name that need to update
        in: body
        name: License
        required: true
        schema:
          $ref: '#/definitions/model.CheckLicenseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResource'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Check license
      tags:
      - users
  /api/v1/users/password/forgot:
    post:
      consumes:
      - application/json
      description: Reset password by secret code
      operationId: ForgotPassword
      parameters:
      - description: Secret code and new password to reset password
        in: body
        name: ForgotPassword
        required: true
        schema:
          $ref: '#/definitions/model.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Reset password
      tags:
      - users
  /api/v1/users/reset-time:
    get:
      description: Get user reset time
      operationId: GetUserResetTime
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUserResetTimeResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user reset time
      tags:
      - users
    patch:
      description: Update user reset time
      operationId: UpdateUserResetTime
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user reset time
      tags:
      - users
  /api/v1/users/resource/{resourceIndex}:
    delete:
      description: Remove user resource by index
      operationId: RemoveUserResource
      parameters:
      - description: Index of resource that need to remove
        in: path
        name: resourceIndex
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResource'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Remove user resource
      tags:
      - users
  /api/v1/users/usernames:
    get:
      description: Get all username require admin
      operationId: GetAllUsername
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all username
      tags:
      - users
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
